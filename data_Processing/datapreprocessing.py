# -*- coding: utf-8 -*-
"""DataPreprocessing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11rDnPtC0TVMnKtq0UWk06ChKz15eJ52_
"""

import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

pd.set_option("Display.Max_rows", None, "Display.Max_columns", None)
train = pd.read_csv('/content/Train-1542865627584.csv')
print("Shape of data: ", train.shape)
train.head()

sns.set_style("whitegrid")
fraud_counts = train.groupby("PotentialFraud")['Provider'].count()

fraud_counts.plot.bar(color=['green', 'red'], edgecolor='black')
plt.title('No. of Fraudulent vs Non-Fraudulent Providers')
plt.xlabel('Potential Fraud')
plt.ylabel('Number of Providers')
plt.xticks(rotation=0)
plt.tight_layout()
plt.show()

fraud_cnt = len(train[train.PotentialFraud == 'Yes'])
print("Total no. of providers in train data: ", len(train))
print("No. of fraudulent providers: {}, which is {:.2f}% of data".format(fraud_cnt, fraud_cnt/len(train)*100))
print("No. of non-fraudulent providers: {}, which is {:.2f}% of data".format(
    len(train) - fraud_cnt, (1 - fraud_cnt/len(train))*100))

test = pd.read_csv("/content/Test-1542969243754.csv")
print("Shape of data: ", test.shape)
test.head()

train_beneficiary = pd.read_csv("/content/Train_Beneficiarydata-1542865627584.csv")
print("Shape of data: ", train_beneficiary.shape)
train_beneficiary.head()

train_beneficiary.columns

train_beneficiary.isna().sum()

train_beneficiary.describe()

test_beneficiary = pd.read_csv("/content/Test_Beneficiarydata-1542969243754.csv")
print("Shape of data: ", test_beneficiary.shape)
test_beneficiary.head()

test_beneficiary.isna().sum()

train_inpatient = pd.read_csv("/content/Train_Inpatientdata-1542865627584.csv")
print("Shape of data: ", train_inpatient.shape)
train_inpatient.head()

train_inpatient.columns

train_inpatient.isna().sum()

train_inpatient.describe()

test_inpatient = pd.read_csv("/content/Test_Inpatientdata-1542969243754.csv")
print("Shape of data: ", test_inpatient.shape)
test_inpatient.head()

test_inpatient.isna().sum()

test_outpatient = pd.read_csv("/content/Test_Outpatientdata-1542969243754.csv")
print("Shape of data: ", test_outpatient.shape)
test_outpatient.head()

test_outpatient.isna().sum()

train_outpatient = pd.read_csv("/content/Train_Outpatientdata-1542865627584.csv")
print("Shape of data: ", train_outpatient.shape)
train_outpatient.head()

train_outpatient.isna().sum()

train_outpatient.columns

train_outpatient.describe()

#combine

def combine_data(provider, beneficiary, inpatient, outpatient):
    ''' This function combines provider, beneficiary, inpatient and outpatient data
        together in a single file. '''
    # Finding common columns in inpatient data and outpatient data
    common_inp_outp = [col for col in inpatient if col in outpatient]
    # Outer joining inpatient data and outpatient data using common columns
    train_in_out = outpatient.merge(inpatient, on=common_inp_outp, how='outer', indicator='is_inpatient')
    train_in_out = train_in_out.replace({'left_only':0, 'right_only':1})
    # Inner joining beneficary data and combination of inpatient and outpatient
    train_benef_in_out = beneficiary.merge(train_in_out, on='BeneID')
    # Combining all combinations with train data containing target variable
    combined_data = provider.merge(train_benef_in_out, on='Provider')
    return combined_data

# Combine all data from training set
train_data = combine_data(train, train_beneficiary, train_inpatient, train_outpatient)
print("Shape of data: ", train_data.shape)
train_data.head()

# Count of null values in train data
train_data.isna().sum()

# Data type of each column
train_data.dtypes

#Data PreProcessing

train_data['PotentialFraud'] = train_data['PotentialFraud'].replace({'Yes':1, 'No':0})
train_data.PotentialFraud.value_counts()

train_data['DOB'] = pd.to_datetime(train_data['DOB'])
train_data['DOD'] = pd.to_datetime(train_data['DOD'])
train_data.head()

train_data['Gender'] = train_data['Gender'].replace({1:'Female', 2:'Male'})
train_data.head()

train_data.groupby('Gender')['BeneID'].nunique().plot.bar(color=[ 'lightcoral','skyblue'], edgecolor='black')
plt.title("Claims Made for Each Gender")
plt.xlabel("Gender")
plt.ylabel("Number of Unique Beneficiaries")
plt.xticks(rotation=0)
plt.tight_layout()
plt.show()

train_data.RenalDiseaseIndicator.replace({'0':0, 'Y':1}, inplace=True)
train_data.head()

train_data.replace({'ChronicCond_Alzheimer': 2, 'ChronicCond_Heartfailure': 2, 'ChronicCond_KidneyDisease': 2,
                           'ChronicCond_Cancer': 2, 'ChronicCond_ObstrPulmonary': 2, 'ChronicCond_Depression': 2,
                           'ChronicCond_Diabetes': 2, 'ChronicCond_IschemicHeart': 2, 'ChronicCond_Osteoporasis': 2,
                           'ChronicCond_rheumatoidarthritis': 2, 'ChronicCond_stroke': 2 }, 0, inplace=True)
train_data.iloc[:, 12:22].head(10)

train_data['ClaimStartDt'] = pd.to_datetime(train_data['ClaimStartDt'])
train_data['ClaimEndDt'] = pd.to_datetime(train_data['ClaimEndDt'])

train_data['AdmissionDt'] = pd.to_datetime(train_data['AdmissionDt'])
train_data['DischargeDt'] = pd.to_datetime(train_data['DischargeDt'])

#we need to add new feature called age into it
dod_year = train_data['DOD'].dt.year
dod_year[pd.notnull(dod_year)].value_counts()

start_year = train_data['ClaimStartDt'].dt.year
print("Frequency of year from ClaimStartDt column: ")
print(start_year[pd.notnull(start_year)].value_counts())
print()
end_year = train_data['ClaimEndDt'].dt.year
print("Frequency of year from ClaimEndDt column: ")
print(end_year[pd.notnull(end_year)].value_counts())

train_data['Age'] = 2009 - train_data['DOB'].dt.year
train_data['Age'].head()

train_data['is_dead'] = train_data['DOD'].apply(lambda x: 0 if pd.isnull(x) else 1)
train_data['is_dead'].value_counts()

train_data['Days_Admitted'] = (train_data['DischargeDt'] - train_data['AdmissionDt']).fillna(pd.Timedelta('0 days'))
train_data['Days_Admitted'] = train_data['Days_Admitted'].apply(lambda x: int(str(x).split()[0]))
train_data['Days_Admitted'][train_data.is_inpatient == 1]

cols = ['ChronicCond_Alzheimer','ChronicCond_Heartfailure',
        'ChronicCond_KidneyDisease','ChronicCond_Cancer',
        'ChronicCond_ObstrPulmonary','ChronicCond_Depression',
        'ChronicCond_Diabetes','ChronicCond_IschemicHeart',
        'ChronicCond_Osteoporasis','ChronicCond_rheumatoidarthritis','ChronicCond_stroke']

train_data['Diseases_Count'] = train_data[cols].sum(axis=1)
train_data[cols+['Diseases_Count']].head()

train_data['Total_Physicians'] = train_data[['AttendingPhysician', 'OperatingPhysician', 'OtherPhysician']]\
                                            .apply(lambda x: sum(pd.notnull(x)), axis=1)
train_data[['AttendingPhysician', 'OperatingPhysician', 'OtherPhysician','Total_Physicians']].head()

cols = ['ClmDiagnosisCode_1', 'ClmDiagnosisCode_2', 'ClmDiagnosisCode_3',
       'ClmDiagnosisCode_4', 'ClmDiagnosisCode_5', 'ClmDiagnosisCode_6',
       'ClmDiagnosisCode_7', 'ClmDiagnosisCode_8', 'ClmDiagnosisCode_9','ClmDiagnosisCode_10']
train_data['Total_ClaimCodes'] = train_data[cols].apply(lambda x: sum(pd.notnull(x)), axis=1)
train_data[cols+['Total_ClaimCodes']].head()

train_data['Claim_Period'] = (train_data['ClaimEndDt'] - train_data['ClaimStartDt']).fillna(pd.Timedelta('0 days'))
train_data['Claim_Period'] = train_data['Claim_Period'].apply(lambda x: int(str(x).split()[0]))
train_data[['ClaimStartDt', 'ClaimEndDt', 'Claim_Period']].head()

cols = ['ClmProcedureCode_1', 'ClmProcedureCode_2','ClmProcedureCode_3',
        'ClmProcedureCode_4', 'ClmProcedureCode_5','ClmProcedureCode_6']
train_data['Total_ProcedureCodes'] = train_data[cols].apply(lambda x: sum(pd.notnull(x)), axis=1)
train_data[cols+['Total_ProcedureCodes']].head()

(train_data.Claim_Period > train_data.Days_Admitted).value_counts()

train_data['ClaimPeriod_greater_DaysAdmitted'] = (train_data.Claim_Period > train_data.Days_Admitted)\
                                                  .replace({True:1, False:0})
train_data['ClaimPeriod_greater_DaysAdmitted'].value_counts()

train_data['is_groupcode'] = train_data['DiagnosisGroupCode'].apply(lambda x: 0 if pd.isnull(x) else 1)
train_data['is_groupcode'].value_counts()

train_data['is_claimcode'] = train_data['ClmAdmitDiagnosisCode'].apply(lambda x: 0 if pd.isnull(x) else 1)
train_data['is_claimcode'].value_counts()

train_data['is_deductible'] = train_data['DeductibleAmtPaid'].apply(lambda x: 0 if pd.isnull(x) else 1)
train_data['is_deductible'].value_counts()

train_data['DeductibleAmtPaid'] = train_data['DeductibleAmtPaid'].fillna(0)
train_data['DeductibleAmtPaid'].isna().sum()
train_data.to_csv('/content/sample_data/traindata_preprocessed.csv', index=False)